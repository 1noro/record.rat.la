<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>record.rat.la</title>
        <link>https://record.rat.la/</link>
        <description>Blog/web personal donde iré registrando mis proyectos y mis líos mentales.</description>
        <image>
            <title>record.rat.la favicon</title>
            <url>https://record.rat.la/favicon.png</url>
            <link>https://record.rat.la/</link>
        </image>

<item>
    <title>Software que utilizo habitualmente</title>
    <link>https://record.rat.la/index.php?page=mi-software.html</link>
    <!--<author>Inoro</author>-->
    <pubDate>Wed, 10 Mar 2021 13:32:00 +0100</pubDate>
    <description>
<![CDATA[<!-- 202103101332i -->
<h1>Software que utilizo habitualmente</h1>

<p>
    Solo listaré aquí programas que considero probados y que he usado durante 
    un tiempo.
</p>

<h2>Básico</h2>

<h3>Sistemas Operativos</h3>

<ul>
    <li>
        <a href="https://archlinux.org/download/"><b>Arch Linux</b></a> es mi 
        distribución principal actualmente en mi PC y portátil.
    </li>
    <li>
        <a href="https://www.debian.org/index.es.html"><b>Debian</b></a> lo 
        utilizo en mis servidores, en mi opinión es la mejor opción para un 
        servidor.
    </li>
    <li>
        <a href="https://ubuntu.com/download/server"><b>Ubuntu Server LTS</b></a> 
        lo utilizo también en mis servidores cuando considero que Debian se 
        queda un poco anticuado, o si voy a probar una aplicación que está mas 
        orientada a esta distribución. No suelo tener muchas instalaciones con 
        este SO, porque muchas veces solo tengo que esperar a la siguiente 
        versión de Debian.
    </li>
</ul>

<h3>Window Manager/Desktop Environment</h3>

<p>
    <b>gnome-shell</b> es el entorno de escritorio que mas me gusta y estoy 
    muy acostumbrado a su <em>workflow</em>. De todas formas estoy muy 
    interesado en probar un <em>tiling window manager</em> estilo 
    <b>dwm</b> o <b>i3</b> en el que sea capaz de recordar todos sus 
    comandos.
</p>

<h3>Terminal</h3>

<p>
    <b>gnome-terminal</b>, la uso porque es la que viene por defecto con 
    <b>gnome-shell</b> pero puede que cambie en algún momento. Busco algo 
    mas simple, como <b>st</b> (simple terminal) de 
    <a href="https://st.suckless.org/">suckless.org</a>, pero aún debería 
    probarla por algún tiempo mas para decidirme.
</p>

<h3>Shell</h3>

<p>
    <b>bash</b>, soy una persona a la que le gusta el default, por lo que 
    aún no veo necesario mudarme a <b>zsh</b>, a pesar de que promete mucha 
    mas flexibilidad.
</p>

<!-- <h3>Editores de texto y entornos de programación</h3>

<p>
    Esta sección no solo es confusa, sinó que en realidad yo me encuentro muy 
    confuso al respecto. Sigo buscando el editor de texto definitivo, he 
    probado muchos, pero no paro de cambiar. Me gustaría proba <b>vim</b> pero 
    creo que aún no estoy preparado.
</p>

<ul>
    <li>
        <b>Visual Studio Code</b> es actualmente mi entorno de desarrollo por 
        defecto. Es rápido y muy extensible gracias a todos los plugins que se 
        le pueden instalar. Empezé usando <b>atom</b> pero acabé canasdome de lo mal que funciona su cliente de <b>git</b>
    </li>
    <li>
        <b>geany</b> para editar texto plano sin necesidad de plugins. Aunque cada vez lo uso menos, y para una función tan simple como esta acabo usando <b>nano</b>.
    </li>
</ul> -->]]>
    </description>
</item>

<item>
    <title>Gitlab con NGINX reverse proxy</title>
    <link>https://record.rat.la/index.php?page=gitlab-nginx.html</link>
    <!--<author>Inoro</author>-->
    <pubDate>Sun, 07 Mar 2021 11:07:00 +0100</pubDate>
    <description>
<![CDATA[<!-- 202103071107i -->
<h1>Gitlab con NGINX reverse proxy</h1>

<p>
    Voy a documentar el proceso de instalación de Gitlab en una máquina virtual 
    detrás de un NGINX reverse proxy.
</p>

<h2>Escenario</h2>

<p>
    <img src="img/202103071107/gitlab-nginx.webp" alt="Diagrama.">
</p>

<h3>Características</h3>

<ul>
    <li>Certificado SSL con Let's Encrypt y certbot.</li>
    <li>
        Escuchar en los puertos 80 (HTTP) y 443 (HTTPs) con una redirección 
        automática desde el 80 al 443.
    </li>
    <li>
        Acceso mediante SSH con clave publica y protegido co fail2ban.
    </li>
</ul>

<h2>Configuración del router</h2>

<p>
    En la sección de redirección de puertos (port forwarding) de nuestro router 
    creamos dos registros nuevos sobre el protocolo TCP.
</p>

<ul>
    <li>El puerto 80 del router apuntará al puerto 80 de la máquina de NGINX (192.168.1.105), para las conexiones HTTP.</li>
    <li>El puerto 443 del router apuntará al puerto 443 de la máquina de NGINX (192.168.1.105), para las conexiones HTTPs.</li>
    <li>El puerto 22 del router apuntará al puerto 22 de la máquina de Gitlab (192.168.1.108), para las conexiones SSH.</li>
</ul>

<h2>Configuración de NGINX</h2>

<p>Nos situamos en la máquina que va a ejercer de reverse proxy con NGINX.</p>

<p>
    Creamos el archivo <samp>/etc/nginx/sites-available/git.example.com.conf</samp>
</p>

<pre>
server {
    listen 80;
    listen [::]:80;
    server_name git.example.com;

    location / {
        proxy_pass "http://192.168.1.108/";
        proxy_redirect off;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Url-Scheme $scheme;
    }
}
</pre>

<p>Habilitamos el sitio.</p>

<pre>
ln -s /etc/nginx/sites-available/git.example.com.conf /etc/nginx/sites-enabled/
</pre>

<p>
    Testeamos la sintaxis de la configuración de NGINX, y si todo va bien, 
    recargamos la configuración.
</p>

<pre>
nginx -t
systemctl reload nginx
</pre>

<p>
    Con el Virtual Host correctamente configurado en NGINX, ejecutamos el certbot.
</p>

<pre>
certbot --nginx -d git.example.com
</pre>

<blockquote>
    Durante el proceso de creación del certificado indicamos que queremos 
    redireccionar el tráfico HTTP al HTTPs.
</blockquote>

<p>
    Archivo <samp>/etc/nginx/sites-available/git.example.com.conf</samp> 
    después de ejecutar el certbot.
</p>

<pre>
server {
    server_name git.example.com;

    location / {
        proxy_pass "http://192.168.1.108/";
        proxy_redirect off;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Url-Scheme $scheme;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/git.example.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/git.example.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = git.example.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    listen [::]:80;

    server_name git.example.com;
    return 404; # managed by Certbot
}
</pre>

<h2>Configuración SSH</h2>

<p><a href="https://docs.github.com/es/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generamos en nuestro equipo una clave SSH.</a></p>

<p>Copiamos la clave a la máquina del Gitlab (192.168.1.108).</p>

<pre>
ssh-copy-id -i ~/.ssh/id_rsa.pub user@192.168.1.108
</pre>

<p>Nos situamos en la máquina que va a ejecutar Gitlab (192.168.1.108).</p>

<p>
    Editamos el archivo <samp>/etc/ssh/sshd_config</samp> y nos aseguramos de 
    que las siguientes lineas tengan los valores mostrados.
</p>

<pre>
UsePAM yes
PasswordAuthentication no
</pre>

<p>Y agregamos la siguiente linea al final.</p>

<pre>
PermitRootLogin no
</pre>

<p>Guardamos y reiniciamos el servicio.</p>

<pre>
sudo systemctl restart sshd
</pre>

<h3>Fail2ban</h3>

<p>Instalamos el programa.</p>

<pre>
sudo apt update
sudo apt install fail2ban
</pre>

<p>Creamos el archivo <samp>/etc/fail2ban/jail.local</samp> y agregamos las siguientes lineas.</p>

<pre>
[DEFAULT]
ignoreip = 127.0.0.1/8 192.168.1.0/24
bantime = 10m
maxretry = 5
findtime = 1d

[sshd]
enabled = true
</pre>

<p>Guardamos y reiniciamos el servicio.</p>

<pre>
sudo systemctl restart fail2ban
</pre>

<h2>Instalación y configuración de Gitlab</h2>

<p>Nos situamos en la máquina que va a ejecutar Gitlab (192.168.1.108).</p>

<p>Instalamos los paquetes necesarios y agregamos el repositorio de Gitlab.</p>

<pre>
sudo apt update
sudo apt install curl openssh-server ca-certificates tzdata perl postfix
</pre>

<pre>
curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
</pre>

<pre>
sudo EXTERNAL_URL="http://git.example.com" apt-get install gitlab-ce
</pre>

<blockquote>
    Nótese que el parámetro <samp>EXTERNAL_URL</samp> se define con <samp>http</samp> y no con <samp>https</samp>.
</blockquote>

<p>
    Editamos el archivo <samp>/etc/gitlab/gitlab.rb</samp> y agregamos las siguientes lineas al final.
</p>

<pre>
nginx['listen_port'] = 80
nginx['listen_https'] = false

nginx['proxy_set_headers'] = {
    "X-Forwarded-Proto" => "http"
}

nginx['real_ip_trusted_addresses'] = [ '192.168.1.0/24' ]
nginx['real_ip_header'] = 'X-Forwarded-For'
nginx['real_ip_recursive'] = 'on'
</pre>

<p>
    Reconfiguramos Gitlab.
</p>

<pre>
sudo gitlab-ctl reconfigure
</pre>

<blockquote>
    Hay que espera un rato a que se reconfigure, incluso después de que el 
    comando haya finalizado.
</blockquote>

<p>
    Una vez acabado este proceso ya podremos acceder a nuestro Gitlab a través 
    de HTTPs para definir la contraseña del usuario <samp>root</samp>.
</p>

<h2>Bibliografía</h2>

<ul>
    <li><a href="https://linuxize.com/post/install-configure-fail2ban-on-ubuntu-20-04/">How to Install and Configure Fail2ban on Ubuntu 20.04</a></li>
    <li><a href="https://about.gitlab.com/install/#ubuntu">Gitlab Official Linux package (recommended installation)</a></li>
    <li><a href="https://docs.gitlab.com/omnibus/settings/nginx.html">Gitlab NGINX settings</a></li>
</ul>]]>
    </description>
</item>

<item>
    <title>Solución a algunas series numéricas en Java y Python</title>
    <link>https://record.rat.la/index.php?page=solucion-series-numericas-java-python.html</link>
    <!--<author>Inoro</author>-->
    <pubDate>Sun, 04 Oct 2020 11:36:00 +0200</pubDate>
    <description>
<![CDATA[<!-- 202010041136i -->
<h1>Solución a algunas series numéricas en Java y Python</h1>

<p>
    Lista del código que calcula las diferentes series numéricas propuestas en el Ejercicio evaluable 1 de la asignatura Programación Multimedia y Dispositivos Móviles.
</p>

<blockquote>
    <i>Voy a tomar como regla que todas las listas serán de 100 elementos como máximo.</i>
</blockquote>

<h2>1. La serie de Fibonacci</h2>

<p>Mi explicación: Empezando con <samp>[0, 1]</samp>, el siguiente se calcula con la suma de los dos anteriores.</p>

<h3>Fibonacci en Java</h3>

<pre>
package ej1pmydm;

public class Ej1pmydm {
    public static void main(String[] args) {
        double lista[] = new double[100];
        lista[0] = 0;
        lista[1] = 1;
        int i = 1;
        while (i < lista.length - 1) {
            lista[i + 1] = lista[i - 1] + lista[i];
            i++;
        }
        for (i = 0; i < lista.length; i++) {
            System.out.println(lista[i]);
        }
    }
}
</pre>

<h3>Fibonacci en Python</h3>

<pre>
lista = [0, 1]
while len(lista) < 100:
    lista.append(lista[-2] + lista[-1])
print(lista)
</pre>

<h2>2. La serie de Tribonacci</h2>

<p>Mi explicación: Empezando con <samp>[1, 1, 2]</samp>, el siguiente se calcula con la suma de los tres anteriores.</p>

<h3>Tribonacci en Java</h3>

<pre>
package ej2pmydm;

public class Ej2pmydm {
    public static void main(String[] args) {
        double lista[] = new double[100];
        lista[0] = 1;
        lista[1] = 1;
        lista[2] = 2;
        int i = 2;
        while (i < lista.length - 1) {
            lista[i + 1] = lista[i - 2] + lista[i - 1] + lista[i];
            i++;
        }
        for (i = 0; i < lista.length; i++) {
            System.out.println(lista[i]);
        }
    }
}
</pre>

<h3>Tribonacci en Python</h3>

<pre>
lista = [1, 1, 2]
while len(lista) < 100:
    lista.append(lista[-3] + lista[-2] + lista[-1])
print(lista)
</pre>

<h2>3. La serie en la cual si el anterior es par se suman los tres anteriores y, si es impar, solo los dos anteriores</h2>

<p>
    Mi explicación: Empezamos con la lista <samp>[1, 1]</samp>.
    <ul>
        <li>Si el último es impar, se suman los 2 últimos para calcular el siguiente.</li>
        <li>Si el último es par, se suman los 3 últimos para calcular el siguiente.</li>
    </ul>
</p>

<h3>La serie anterior en Java</h3>

<pre>
package ej3pmydm;

public class Ej3pmydm {
    public static void main(String[] args) {
        double lista[] = new double[100];
        lista[0] = 1;
        lista[1] = 1;
        int i = 1;
        while (i < lista.length - 1) {
            if (lista[i] % 2 != 0) {
                lista[i + 1] = lista[i - 1] + lista[i];
            } else {
                lista[i + 1] = lista[i - 2] + lista[i - 1] + lista[i];
            }
            i++;
        }
        for (i = 0; i < lista.length; i++) {
            System.out.println(lista[i]);
        }
    }
}
</pre>

<h3>La serie anterior en Python</h3>

<pre>
lista = [1, 1]
while len(lista) < 100:
    if lista[-1] % 2 != 0:
        lista.append(lista[-1] + lista[-2])
    else:
        lista.append(lista[-1] + lista[-2] + lista[-3])
print(lista)
</pre>

<h2>4. La serie de los cuadrados perfectos escritos al revés</h2>

<p>Tengo dudas, no se si se refiere a esto:</p>

<h3>Los cuadrados perfectos al revés en Java</h3>

<pre>
package ej4pmydm;

public class Ej4pmydm {
    public static void main(String[] args) {
        int lista[] = new int[100];
        int numero = 100;
        int i = 0;
        while (i < lista.length) {
            lista[i] = numero * numero;
            numero--;
            i++;
        }
        for (i = 0; i < lista.length; i++) {
            System.out.println(lista[i]);
        }
    }
}
</pre>

<h3>Los cuadrados perfectos al revés en Python</h3>

<pre>
lista = []
numero = 100
while numero > 0:
    lista.append(numero * numero)
    numero -= 1
print(lista)
</pre>

<h2>5. La serie que suma las cifras de los anteriores</h2>

<p>Ojo, se refiere a el <b>número de cifras</b>, no a la suma del os valores anteriores.</p>

<h3>La suma las cifras de los anteriores en Java</h3>

<pre>
package ej5pmydm;

public class Ej5pmydm {
    public static void main(String[] args) {
        int lista[] = new int[100];
        lista[0] = 1;
        int i = 0;
        while (i < lista.length - 1) {
            lista[i+1] = lista[i] + Integer.toString(lista[i]).length();
            i++;
        }
        for (i = 0; i < lista.length; i++) {
            System.out.println(lista[i]);
        }
    }
}
</pre>

<h3>La suma las cifras de los anteriores en Python</h3>

<pre>
lista = [1]
while len(lista) < 100:
    nuevo = 0
    for numero in lista:
        nuevo += len(str(numero))
    lista.append(nuevo)
print(lista)
</pre>
]]>
    </description>
</item>

<item>
    <title>La forma más rápida de hacer git push</title>
    <link>https://record.rat.la/index.php?page=la-forma-mas-rapida-de-hacer-un-git-push.html</link>
    <!--<author>Inoro</author>-->
    <pubDate>Wed, 30 Sep 2020 12:40:00 +0200</pubDate>
    <description>
<![CDATA[<!-- 202009301240i -->
<h1>La forma más rápida de hacer <samp>git push</samp></h1>

<p>
    Estos tres comandos, que se deben copiar y pegar en bloque, son la forma mas sencilla para subir tus cambios de un repositorio a la nube.
</p>

<h2>Requisitos previos a la ejecución</h2>

<ul>
    <li>Haber configurado el usuario y el correo electrónico.</li>
    <li>Situar la terminal en la carpeta raíz del repositorio (la primera).</li>
</ul>

<p>Para configurar el usuario y el correo electrónico se deben ejecutar los siguientes comandos:</p>

<pre>
git config --global user.name "nombre"
git config --global user.email "email@example.com"
</pre>

<p>Una vez se hayan cumplido los requisitos previos, solo hay que copiar <b>todos</b> los comandos que vienen a continuación y los pegamos en la terminal.</p>

<pre>
git add . \
git commit -m "repositorio actualizado" \
git push
</pre>

<blockquote>
    Si tenemos configurado el <i>GIT</i> por <i>SSH</i> no hace falta que pongáis la contraseña, pero si lo tenéis por <i>HTTPS</i>, os solicitará el nombre de usuario y la contraseña de <i>GitHub</i>, <i>GitLab</i>, etc.
</blockquote>
]]>
    </description>
</item>

<item>
    <title>Cowboy Bebop – The Real Folk Blues</title>
    <link>https://record.rat.la/index.php?page=cowboy-bebop.html</link>
    <!--<author>Inoro</author>-->
    <pubDate>Mon, 28 Sep 2020 18:10:00 +0200</pubDate>
    <description>
<![CDATA[<!-- 202009281810i -->
<h1>Cowboy Bebop – <i>The Real Folk Blues</i></h1>

<blockquote>
    I think it's time to blow this scene.<br>
    Get everybody and their stuff together.<br>
    Okay, three, two, one ¡Let's jam!
</blockquote>

<p>
    Este artículo lo publiqué originalmente en un antiguo blog que hoy en día está desaparecido. Y ya que últimamente estoy haciendo reorganización y borrado de <i>backups</i> encuentro muchas antiguas joyas. Esta en concreto me gusta bastante, así que decidí re-publicarla. Espero que os anime a ver esta maravillosa serie, por la que sigo sintiendo el mismo aprecio que se ve reflejado aquí.
</p>

<p>
    <img src="img/202009281810/cover.webp" alt="Portada del artículo.">
</p>

<p>
    La humanidad en el año 2071, una época decadente en la que todo acaba, donde los hombres se dedican a explorar los confines del vasto universo, con la tierra reducida a un desolado desierto convirtiendo a Marte en el planeta con mayor población del universo conocido. Gracias a estas "excelentes" condiciones el nivel de criminalidad ha aumentado de tal forma que todo se asemeja mucho al salvaje oeste, razón por la cual ser un cazarecompensas se ha convertido un oficio muy lucrativo.
</p>

<p>
    Este es el paisaje en el que se sitúa Cowboy Bebop, una pequeña y poco conocida obra de arte de 26 episodios con la que, aunque no seas un <a href="https://es.wikipedia.org/wiki/Otaku">otaku</a> de cuidado, podrás disfrutar como el que más con las aventuras que viven los protagonistas de la serie en su vida como cazarecompensas espaciales. Un <i>western</i> intergaláctico con fundamentos muy arraigados en el cine negro y algún guiño de géneros como el <i>cyberpunk</i> al estilo de Blade Runner,  una combinación perfecta de imagen y sonido que producen un sinfín de sensaciones mientras estas sentado tranquilamente frente a tu televisor.
</p>

<!-- <div class="img-2">
    <a target="_blank" href="img/de_doc/cbEd.gif">
        <img src="img/de_doc/cbEd.gif" alt="Edward balanceándose">
    </a>
    <div class="desc">
        Edward y su PC
    </div>
</div> -->

<p>
    La historia se centra en la tripulación de la nave bautizada como <i>Bebop</i>, formada por un grupo de personajes muy variopintos: <b>Spike</b>; pasota, sarcástico, divertido, fiel, temerario y con un cierto parecido a Lucky Luck. <b>Jet</b>; un amigo de toda confianza que siempre está allí para cuando se le necesita. <b>Faye</b>; una chica independiente que viene y va según su parecer y, aunque se empeñe en ocultarlo ella también tiene sentimientos. <b>Ed</b>; una niña espontánea, graciosa y muy inteligente, con grandes facetas como <i>hacker</i>. Y <b>Ein</b>; un <a href="https://es.wikipedia.org/wiki/Corgi_gal%C3%A9s_de_Pembroke" title="Raza de perro.">corgi</a> que destaca por su gran astucia. Una tropa de cazarecompensas que vagan por el espacio viviendo aventuras y subsistiendo como pueden. Ellos no son buenos, pero tampoco son malos, son personas corrientes como tu o como yo, amigos que te acompañan durante un viaje alucinante dejando un gran vacío cundo este termina. Todos ellos poseen un oscuro pasado que marca parte de su comportamiento, el cual no lograrás entender hasta prácticamente el final de la serie.
</p>

<p>
    Nos encontramos ante un <a href="https://es.wikipedia.org/wiki/Anime">anime</a> muy original, el propio hecho de no tener un <a href="https://es.wikipedia.org/wiki/Manga">manga</a> en el que basarse ya lo distingue de la mayoría de los animes convencionales. Además la manera de contar la historia en capítulos individuales y autoconclusivos, es una forma muy versátil de tratar diferentes temas aportando calidad a las diferentes sub-tramas que van surgiendo a lo largo de la serie sobre los pasados inciertos de los protagonistas, presentándonoslos como pequeñas piezas de un gran puzzle que solo lograremos entender al final. Gracias a este recurso de los capítulos separados <a href="https://es.wikipedia.org/wiki/Shin'ichir%C5%8D_Watanabe" title="Shin'ichirō Watanabe">el autor</a> expone una serie de historias muy diferentes que navegan entre géneros como el drama, la comedia, la acción o el terror.
</p>

<p>
    Y por último queda resaltar uno de los elementos más importante de la serie, con el cual este anime alcanza mi clasificación como obra de arte. La banda sonora, una preciosa <i>OST</i> centrada no solo en el <a href="https://es.wikipedia.org/wiki/Bebop"><i>bebop</i></a>, como el título indica, sino que recorre todo el jazz adentrándose incluso en otros géneros como el <i>rock</i> o el <i>rhythm&blues</i>, y hasta el <i>funkie</i>. La combinación de imagen y sonido en esta serie es perfecta, sobre todo en las excelentemente coreografiadas escenas de lucha y las batallas espaciales a ritmo del mejor jazz.
</p>

<!-- <iframe class="yt" width="560" height="315" src="https://www.youtube.com/embed/fS8Klrf1DSo" frameborder="0" allowfullscreen></iframe> -->

<p>
    Cowboy Bebop es una serie fabulosa, serie que toca un montón de temas usuales y no tan usuales con los que disfrutarás como un niño, proporcionando de vez en cuando momentos muy filosóficos que te hacen reflexionar ante la pantalla. Dejándonos al final de cada capítulo una frase que muchas veces resume a la perfección lo que se acaba de presenciar. Yo también despediré este artículo con una de esas frases.
</p>

<h3 style="text-align: right;"><i>SEE YOU SPACE COWBOY...</i></h2>

<!-- <iframe class="yt" width="420" height="315" src="https://www.youtube.com/embed/Aw3fN3OPk3A" frameborder="0" allowfullscreen></iframe> -->

<p>
    Publicado originalmente el 9 de Abril de 2016.
</p>
]]>
    </description>
</item>

    </channel>
</rss>